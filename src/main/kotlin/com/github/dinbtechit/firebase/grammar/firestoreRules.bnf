{
 parserClass="com.github.dinbtechit.firebase.language.parser.RulesParser"
 parserUtilClass="com.github.dinbtechit.firebase.language.parser.RulesParserUtil"

 extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

 psiClassPrefix="PsiFirestoreRules"
 psiImplClassSuffix="Impl"
 psiPackage="com.github.dinbtechit.firebase.psi.types"
 psiImplPackage="com.github.dinbtechit.firebase.psi.types.impl"

 elementTypeHolderClass="com.github.dinbtechit.firebase.psi.FirestoreRulesTypes"
 elementTypeClass="com.github.dinbtechit.firebase.psi.RulesElementTypes"
 tokenTypeClass="com.github.dinbtechit.firebase.psi.RulesTokenType"

 tokens = [
     WHITESPACE='regexp:[ \n\t\r\f]'
     RULES_VERSION = 'rules_version'
     BOOL_LITERAL='regexp:(true)|(false)'
     NUMBER_LITERAL='regexp:\d+(\.\d*)?'
     STRING_LITERAL="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\.)*\")"
     PATH_VARIABLE_LITERAL="regexp:\{[_a-zA-Z0-9]+(=\*\*)?}"
     PATH_BUILT_IN_LITERAL="regexp:\$\([._a-zA-Z0-9]*\)"

     L_BRACE        =  '{'
     R_BRACE        =  '}'
     L_BRACK        =  '['
     R_BRACK        =  ']'
     L_PAREN        =  '('
     R_PAREN        =  ')'
     COLON_COLON    =  '::'
     COLON          =  ':'
     SEMICOLON      =  ';'
     COMMA          =  ','
     QUOTE          = "'"
     DOUBLE_QUOTE   = '"'
     LT             =  '<'
     GT             =  '>'
     AND            = '&'
     OR             = '|'
     EQ_EQ          = '=='
     NOT_EQ         = '!='
     EQ             = '='
     DOT            =  '.'

     EXCL           =  '!'
     PLUS           =  '+'
     MINUS          =  '-'
     XOR            =  '^'
     MUL            =  '*'
     DIV            =  '/'
     MODULO         =  '%'
     AT             =  '@'
     HASH           =  '#'
     Q_MARK         =  '?'

     // Contextual tokens
     LT_EQ           = '<='
     LT_LT           = '<<'
     GT_EQ           = '>='
     GT_GT           = '>>'
     OR_OR           = '||'
     AND_AND         = '&&'

     /*SLASH = '/'
     op = '->'
     COLON = ':'
     COMMA = ','
     EQ = '='
     DOT = '.'
     Q_MARK = '?'
     DOT_COMMA = ';'
     WILD_CARD = '=**'
     MODULO         =  '%'
     char = 'regexp:[\n\r\u2028\u2029]'
     LINE_COMMENT='LINE_COMMENT'
     BLOCK_COMMENT='BLOCK_COMMENT'*/

     LINE_COMMENT='regexp://.*'
     BLOCK_COMMENT='regexp:/\*([^*]|\*+[^*/])*(\*+/)?'
     REQUEST  = 'request'
     RESOURCE = 'resource'

     SERVICE     = "service"
     ALLOW       = 'allow'
     FUNCTION    = 'function'
     MATCH       = 'match'
     LET         = 'let'

     // Secondary Keywords
     IF = 'if'
     RETURN = 'return'
     IN = 'in'

     //Permission keywords
     GET     = 'get'
     READ    = 'read'
     WRITE   = 'write'
     LIST    = 'list'
     CREATE  = 'create'
     UPDATE  = 'update'
     DELETE  = 'delete'

     // rules.firestore Methods
     EXISTS = 'exists'
     EXISTS_AFTER = 'existsAfter'
     GET_AFTER = 'getAfter'

     // rules.Path methods
     BIND = 'bind'

     //Types
     BOOL        = 'bool'
     INT         = 'int'
     FLOAT       = 'float'
     NUMBER      = 'number_kw'
     STRING      = 'string_kw'
     MAP         = 'map_kw'
     TIMESTAMP   = 'timestamp_kw'
     DURATION    = 'duration_kw'
     LATLNG      = 'latlng_kw'

     IDENTIFIER='regexp:[_a-zA-Z0-9\-]+'
   ]
   //extends('.*Expression') = 'expressionWrapper'
   generateTokenAccessors = true
}

ruleFile ::= versionDef? (serviceBlock*)? {
 pin = 1
 }
versionDef ::= RULES_VERSION '=' STRING_LITERAL SEMICOLON {
 pin = 1
}
private recovery ::= !(<<eof>>|serviceBlock)

serviceBlock ::= SERVICE serviceName serviceBody {
 pin = 1
}
serviceName  ::= "cloud.firestore"| "firebase.storage"
serviceBody ::= '{'  serviceElements*  '}' {
pin = 1
}
private serviceElementRecovery ::= !('{')
private serviceElements ::= functionBlock | matchBlock {
 recoverWhile = serviceBodyRecover
}
private serviceBodyRecover ::= !('}'| functionBlock | matchBlock )

// --- Function Block ----
functionBlock ::= FUNCTION functionName functionParameter functionBody {
 pin = 1
}
functionName ::= IDENTIFIER {
 pin = 1
}
functionParameter ::= '(' ')' {
 pin = 1
}
functionBody ::= '{' functionBodyElements* '}' {
 pin = 1
}

private functionBodyElements ::= commentRule | variableDeclaration
                                 | variableAssignment
                                 | functionCallStmtWithSemi | returnStmt {
 pin = 1
 recoverWhile = functionBodyRecover
}
private functionBodyRecover ::= !('}'|variableDeclaration | variableAssignment
                                     | functionCallStmtWithSemi | returnStmt)
// --- Function Elements ----
// Variable Declaration
variableDeclaration ::= LET variableName variableDeclarationElements {
 pin = 1
}
variableName ::= IDENTIFIER
private variableDeclarationElements ::= variableInitialization | SEMICOLON

variableInitialization ::= "=" variableAssignmentElements SEMICOLON {
 pin = 1
}
variableAssignment ::= variableName "=" variableAssignmentElements SEMICOLON {
 pin = 2
}
private variableAssignmentElements ::=  functionCallStmt | variableName  | expressionWrapper | NUMBER_LITERAL | STRING_LITERAL

returnStmt ::= {RETURN [expressionWrapper|variableName] SEMICOLON} {
 pin = 1
}

// Return Statement

// Function Call Expression

functionCallStmtWithSemi ::= functionCallStmt SEMICOLON {
 pin = '1'
}

functionCallStmt ::= functionName '(' functionArgumentList? ')'
functionArgumentList ::= functionArgument (',' functionArgument)* {
 pin = 1
}
functionArgument ::= variableName | STRING_LITERAL | expressionWrapper

// --- Match Block -----
matchBlock ::= MATCH matchPath matchBody {
 pin = 1
}
matchPath ::= '/' path ('/' path)* {
 pin('.*') = 1
}
private path ::= IDENTIFIER | NUMBER_LITERAL | PATH_VARIABLE_LITERAL
matchBody ::= '{' matchBodyElements* '}' {
 pin = 1
}
private matchBodyElements ::= allowBlock | functionBlock | matchBlock {
 recoverWhile = matchBlockRecovery
}
private matchBlockRecovery ::= !('}'|allowBlock | functionBlock | matchBlock)

// --- Match Elements
// Match - Allow
allowBlock ::= ALLOW permissions allowConditionOrSemi {
 pin = 1

}


permissions ::= permissionType (',' permissionType)* {
 pin('.*') = 1
 recoverWhile = permissionTypeRecovery
}
private permissionTypeRecovery ::= !(';'|':'|allowBlock|matchBlock|functionBlock|' '|'}')
 permissionType ::= GET|CREATE|LIST|READ|WRITE|DELETE|UPDATE {
}
private allowConditionOrSemi ::= allowIfStmt | SEMICOLON
allowIfStmt ::= COLON IF allowIfCondition SEMICOLON {
 pin = 1
}
allowIfCondition ::= ifLogic | ifLogicWithBrackets


// IF Block
ifLogic ::=  ifConditionExpression
ifLogicWithBrackets ::= L_PAREN ifConditionExpression R_PAREN {
 pin = 1
}
private ifConditionExpression ::= rulesMethod | object | functionCallStmt | variableName | expressionWrapper

// rules.firestore methods
rulesMethod ::= methods "(" getPath ")" bindMethod? {
 pin = 1
}
bindMethod ::= '.' BIND '(' jsonObject ')'

jsonObject ::= '{' pair (',' pair)* '}'
private pair ::= keyValue ':' jsonValue
jsonArray ::= '[' jsonValue (',' jsonValue)* ']'

jsonValue ::= STRING_LITERAL | NUMBER_LITERAL | jsonObject | jsonArray | BOOL_LITERAL | 'null'
private keyValue ::= STRING_LITERAL

private methods ::= GET | GET_AFTER | EXISTS | EXISTS_AFTER
getPath ::= '/' getSubPath ('/' getSubPath)* {
 pin('.*') = 1
}
private getSubPath ::= IDENTIFIER | NUMBER_LITERAL | PATH_BUILT_IN_LITERAL

// Object
object ::= interfaceType  ('.' objectProperty)* {
 pin('.*') = 1
}
private interfaceType ::= REQUEST | RESOURCE
objectProperty ::= functionCallStmt | IDENTIFIER

// --- Common Elements ----

// Comment or Block Comment
commentRule ::=  (LINE_COMMENT|blockCommentRule) {
  elementTypeClass = "com.github.dinbtechit.firebase.psi.types.RuleCommentElement"
}
blockCommentRule ::= BLOCK_COMMENT {
 elementTypeClass = "com.github.dinbtechit.firebase.psi.types.RuleBlockCommentElement"
}

// Expression
expressionWrapper ::= arithmeticExpression
                        | booleanExpression

// Arithmetic Expr
arithmeticExpression ::= term (add_op term)*
term ::= factor (mult_op factor)*
factor ::= NUMBER_LITERAL | "(" arithmeticExpression ")"
add_op ::= "+" | "-"
mult_op ::= "*" | "/" | '%'

// Logical Expression


// Boolean Expression
booleanExpression ::= BOOL_LITERAL